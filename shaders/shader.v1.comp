#version 430 

layout(local_size_x=16,local_size_y=16) in;

uniform writeonly image2D color;
uniform ivec2 size;
//uniform sampler2D text;

uniform vec4 coeff;
uniform vec2 a;

uniform mat4x2 solutions;

uniform vec2 start;
uniform vec2 end;

const float tol=1e-6;

const int maxsteps=1000;

const ivec2 gid=ivec2(gl_GlobalInvocationID.xy);

vec2 complexmul(vec2 u, vec2 v){

	return vec2(u.x*v.x-u.y*v.y,(u.x+u.y)*(v.x+v.y)-u.x*v.x-u.y*v.y);

}

vec2 complexdiv(vec2 u, vec2 v){

	float div=v.x*v.x+v.y*v.y;
	return vec2((u.x*v.x+u.y*v.y)/div,(u.y*v.x-u.x*v.y)/div);

}

vec2 fpol(vec2 x){

	vec2 horner=a+complexmul(x,vec2(coeff.w,0.)+complexmul(x,vec2(coeff.z,0.)+complexmul(x,vec2(coeff.y,0.)+x*coeff.x)));
	return horner;

}

vec2 fpolprime(vec2 x){

	vec2 horner=coeff.w+complexmul(x,2.*vec2(coeff.z,0.)+complexmul(x,3.*vec2(coeff.y,0.)+4.*x*coeff.x));
	return horner;

}

void main(){
	
	int steps=1;
	const vec2 delta=(end-start)/vec2(size);
	vec2 z=start+gid*delta;
	
	while(steps<maxsteps){

		vec2 pol=fpol(z);
		vec2 polp=fpolprime(z);
		vec2 diff=complexdiv(pol,polp);
		
		if(length(diff)<tol){
			vec2 newz=z-diff;
			if(length(newz-solutions[0])<tol){
				imageStore(color,gid,vec4(0.,0.,1.-float(steps)/float(maxsteps)*15.,1.));
				return;
			}
			else if(length(newz-solutions[1])<tol){
				imageStore(color,gid,vec4(0.,1.-float(steps)/float(maxsteps)*15.,0.,1.));
				return;
			}else if(length(newz-solutions[2])<tol){
				imageStore(color,gid,vec4(vec2(1.-float(steps)/float(maxsteps)),0.,1.));
				return;
			}else if(length(newz-solutions[3])<tol){
				imageStore(color,gid,vec4(1.-float(steps)/float(maxsteps)*15.,0.,1.-float(steps)/float(maxsteps)*15.,1.));
				return;
			}
		}

		z=z-diff;
		steps=steps+1;


	}
	
}